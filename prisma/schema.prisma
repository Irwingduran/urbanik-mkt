generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  role          Role      @default(USER) // DEPRECATED: Use userRoles instead
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  addresses      Address[]
  orders         Order[]
  paymentMethods PaymentMethod[]
  reviews        Review[]
  profile        UserProfile?
  vendor         Vendor?
  wishlist       WishlistItem[]
  cartItems      CartItem[]
  notifications  Notification[]
  accounts       Account[]
  sessions       Session[]

  // New multi-role system
  userRoles         UserRole[]
  customerProfile   CustomerProfile?
  vendorProfile     VendorProfile?
  vendorApplication VendorApplication[]

  @@map("users")
}

model UserProfile {
  id                   String    @id @default(cuid())
  userId               String    @unique
  firstName            String?
  lastName             String?
  phone                String?
  birthDate            DateTime?
  bio                  String?
  sustainabilityFocus  String[]
  preferredCategories  String[]
  priceRange           String?
  notifyNewProducts    Boolean   @default(true)
  notifyPriceAlerts    Boolean   @default(true)
  notifyOrderUpdates   Boolean   @default(true)
  notifySustainability Boolean   @default(true)
  notifyMarketing      Boolean   @default(false)
  regenScore           Int       @default(0)
  loyaltyPoints        Int       @default(0)
  nftsCollected        Json[]    @default([])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Vendor {
  id             String    @id @default(cuid())
  userId         String    @unique
  companyName    String
  description    String?
  website        String?
  phone          String?
  logo           String?
  coverImage     String?
  founded        String?
  employees      String?
  location       String?
  regenScore     Int       @default(0)
  nftLevel       String    @default("Semilla Verde")
  totalProducts  Int       @default(0)
  totalSales     Int       @default(0)
  monthlyRevenue Float     @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  orders         Order[]
  products       Product[]
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vendors")
}

model Product {
  id               String         @id @default(cuid())
  vendorId         String
  name             String
  description      String
  price            Float
  originalPrice    Float?
  sku              String         @unique
  category         String
  subcategory      String?
  images           String[]
  stock            Int            @default(0)
  minStock         Int            @default(5)
  maxOrderQuantity Int            @default(10)
  inStock          Boolean        @default(true)
  regenScore       Int            @default(0)
  certifications   String[]
  co2Reduction     Float          @default(0)
  waterSaving      Float          @default(0)
  energyEfficiency Float          @default(0)
  dimensions       Json? // {length, width, height, weight}
  materials        String[]       @default([])
  origin           String? // Country/region of origin
  nfts             Json[]         @default([])
  featured         Boolean        @default(false)
  active           Boolean        @default(true)
  views            Int            @default(0)
  salesCount       Int            @default(0)
  averageRating    Float          @default(0)
  reviewCount      Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  orderItems       OrderItem[]
  vendor           Vendor         @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  reviews          Review[]
  wishlistItems    WishlistItem[]
  cartItems        CartItem[]
  notifications    Notification[]

  @@map("products")
}

model Order {
  id                String        @id @default(cuid())
  userId            String
  vendorId          String
  status            OrderStatus   @default(PENDING)
  total             Float
  subtotal          Float
  tax               Float         @default(0)
  shipping          Float         @default(0)
  shippingAddress   Json
  trackingNumber    String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  paymentMethod     String
  paymentStatus     PaymentStatus @default(PENDING)
  stripePaymentId   String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  items             OrderItem[]
  user              User          @relation(fields: [userId], references: [id])
  vendor            Vendor        @relation(fields: [vendorId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  total     Float
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  type      String
  name      String
  street    String
  city      String
  state     String
  zipCode   String
  country   String   @default("MÃ©xico")
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model PaymentMethod {
  id                    String   @id @default(cuid())
  userId                String
  type                  String
  brand                 String?
  last4                 String?
  expiryMonth           Int?
  expiryYear            Int?
  isDefault             Boolean  @default(false)
  stripePaymentMethodId String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])

  @@map("payment_methods")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  productId String?
  orderId   String?
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product?         @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@map("notifications")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  icon        String?
  parentId    String?
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")

  @@map("categories")
}

// ============================================
// NEW MULTI-ROLE SYSTEM
// ============================================

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  role      Role
  grantedAt DateTime @default(now())
  grantedBy String? // userId of admin who granted this role
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
  @@index([userId])
  @@index([role])
  @@map("user_roles")
}

model CustomerProfile {
  id     String @id @default(cuid())
  userId String @unique

  // Preferences
  favoriteCategories      String[] @default([])
  sustainabilityInterests String[] @default([])
  priceRange              String?

  // Shopping preferences
  preferredPaymentMethod  String?
  preferredShippingMethod String?

  // Metrics
  totalOrders       Int     @default(0)
  totalSpent        Decimal @default(0) @db.Decimal(10, 2)
  averageOrderValue Decimal @default(0) @db.Decimal(10, 2)

  // Loyalty
  loyaltyTier  String @default("BRONZE") // BRONZE, SILVER, GOLD, PLATINUM
  rewardPoints Int    @default(0)

  // Default address
  defaultAddressId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customer_profiles")
}

model VendorProfile {
  id     String @id @default(cuid())
  userId String @unique

  // Business Information
  companyName     String
  businessType    String? // "LLC", "Individual", "Corporation", etc.
  taxId           String? // RFC in Mexico
  businessAddress String?
  businessPhone   String?
  website         String?

  // Onboarding
  onboardingStatus OnboardingStatus @default(PENDING)
  onboardingStep   Int              @default(0)
  onboardingData   Json? // Store wizard progress

  // Verification
  verificationStatus VerificationStatus @default(PENDING)
  verifiedAt         DateTime?
  verifiedBy         String? // admin userId
  rejectionReason    String?            @db.Text

  // Business Details
  description   String? @db.Text
  logo          String?
  banner        String?
  foundedYear   Int?
  employeeCount String? // "1-10", "11-50", etc.

  // Financial
  bankAccount     String? @db.Text // Encrypted CLABE
  bankName        String?
  accountHolder   String?
  stripeAccountId String? @unique
  stripeOnboarded Boolean @default(false)

  // Commission
  commissionRate   Decimal @default(15) @db.Decimal(5, 2) // 15%
  customCommission Boolean @default(false)

  // Metrics
  totalProducts  Int     @default(0)
  activeProducts Int     @default(0)
  totalSales     Decimal @default(0) @db.Decimal(10, 2)
  totalOrders    Int     @default(0)
  averageRating  Float   @default(0)
  reviewCount    Int     @default(0)

  // Performance
  responseTime       Int? // Average response time in hours
  fulfillmentRate    Float @default(100) // Percentage
  onTimeDeliveryRate Float @default(100) // Percentage

  // Status
  active          Boolean   @default(true)
  suspended       Boolean   @default(false)
  suspendedReason String?   @db.Text
  suspendedAt     DateTime?
  suspendedBy     String? // admin userId

  // Sustainability
  regenScore          Int      @default(0)
  certifications      String[] @default([])
  sustainabilityGoals String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([verificationStatus])
  @@index([active])
  @@map("vendor_profiles")
}

model VendorApplication {
  id     String @id @default(cuid())
  userId String

  // Business Info
  companyName     String
  businessType    String
  taxId           String?
  description     String? @db.Text
  website         String?
  businessPhone   String?
  businessAddress String?

  // Documents (JSON with URLs)
  documents Json? // { idDocument, taxDocument, proofOfAddress, etc. }

  // Review
  status          ApplicationStatus @default(PENDING)
  reviewedBy      String? // admin userId
  reviewedAt      DateTime?
  rejectionReason String?           @db.Text
  internalNotes   String?           @db.Text // Admin notes

  // Tracking
  submittedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("vendor_applications")
}

// ============================================
// ENUMS
// ============================================

enum Role {
  CUSTOMER // Default role for all new users (renamed from USER)
  VENDOR // Seller role (granted after approval)
  ADMIN // Administrator
  USER // DEPRECATED - kept for backward compatibility
}

enum OnboardingStatus {
  PENDING
  IN_PROGRESS
  SUBMITTED
  APPROVED
  REJECTED
}

enum VerificationStatus {
  PENDING
  IN_REVIEW
  VERIFIED
  REJECTED
  SUSPENDED
}

enum ApplicationStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  WITHDRAWN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum NotificationType {
  ORDER_CREATED
  ORDER_UPDATED
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_CANCELLED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  STOCK_LOW
  PRODUCT_REVIEW
  PRICE_ALERT
  MARKETING
  SYSTEM
}

// NextAuth required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
